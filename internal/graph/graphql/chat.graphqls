type Conversation {
    id: ID!
    users: [User]!
    messages: [Message]!
}

type Message {
    id: ID!
    user: User!
    conversation: Conversation!
    content: String!
    createdAt: String!
}

input SendMessageInput {
    userId: ID!
    conversationId: ID!
    content: String!
}

input CreateConversationInput {
    userIds: [ID!]!
}

extend type Query {
    user(id: ID!): User
    conversation(id: ID!): Conversation
    message(id: ID!): Message
}

extend type Mutation {
    sendMessage(input: SendMessageInput!): Message
    createConversation(input: CreateConversationInput!): Conversation
}

type Subscription {
    newMessage(conversationId: ID!): Message
}