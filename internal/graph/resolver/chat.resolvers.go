package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"github.com/badaccuracyid/pretpa-web-ef/internal/graph"
	"github.com/badaccuracyid/pretpa-web-ef/internal/graph/model"
	"github.com/badaccuracyid/pretpa-web-ef/internal/service"
)

// CreatedAt is the resolver for the createdAt field.
func (r *messageResolver) CreatedAt(ctx context.Context, obj *model.Message) (string, error) {
	objectCreatedAt := obj.CreatedAt
	return objectCreatedAt.String(), nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (*model.Message, error) {
	chatService := service.NewChatService(ctx, r.DB)
	return chatService.SendMessage(input)
}

// CreateConversation is the resolver for the createConversation field.
func (r *mutationResolver) CreateConversation(ctx context.Context, input model.CreateConversationInput) (*model.Conversation, error) {
	chatService := service.NewChatService(ctx, r.DB)
	return chatService.CreateConversation(input)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userService := service.NewUserService(ctx, r.DB)
	return userService.GetUser(id)
}

// Conversation is the resolver for the conversation field.
func (r *queryResolver) Conversation(ctx context.Context, id string) (*model.Conversation, error) {
	chatService := service.NewChatService(ctx, r.DB)
	return chatService.GetConversation(id)
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, id string) (*model.Message, error) {
	chatService := service.NewChatService(ctx, r.DB)
	return chatService.GetMessage(id)
}

// NewMessage is the resolver for the newMessage field.
func (r *subscriptionResolver) NewMessage(ctx context.Context, conversationID string) (<-chan *model.Message, error) {
	chatService := service.NewChatService(ctx, r.DB)
	messageChan, doneChan, err := chatService.NewMessageSubscription(conversationID)
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		close(doneChan)
	}()

	return messageChan, nil
}

// Message returns graph.MessageResolver implementation.
func (r *Resolver) Message() graph.MessageResolver { return &messageResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type messageResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
