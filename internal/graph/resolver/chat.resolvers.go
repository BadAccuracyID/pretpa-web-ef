package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"strconv"

	"github.com/badaccuracyid/tpa-web-ef/internal/graph"
	"github.com/badaccuracyid/tpa-web-ef/internal/graph/model"
)

// ID is the resolver for the id field.
func (r *conversationResolver) ID(ctx context.Context, obj *model.Conversation) (string, error) {
	objectID := obj.ID
	return strconv.Itoa(int(objectID)), nil
}

// ID is the resolver for the id field.
func (r *conversationSubscriptionResolver) ID(ctx context.Context, obj *model.ConversationSubscription) (string, error) {
	objectID := obj.ID
	return strconv.Itoa(int(objectID)), nil
}

// ID is the resolver for the id field.
func (r *messageResolver) ID(ctx context.Context, obj *model.Message) (string, error) {
	objectID := obj.ID
	return strconv.Itoa(int(objectID)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *messageResolver) CreatedAt(ctx context.Context, obj *model.Message) (string, error) {
	objectCreatedAt := obj.CreatedAt
	return objectCreatedAt.String(), nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: SendMessage - sendMessage"))
}

// CreateConversation is the resolver for the createConversation field.
func (r *mutationResolver) CreateConversation(ctx context.Context, input model.CreateConversationInput) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: CreateConversation - createConversation"))
}

// SubscribeToConversation is the resolver for the subscribeToConversation field.
func (r *mutationResolver) SubscribeToConversation(ctx context.Context, input model.SubscribeToConversationInput) (*model.ConversationSubscription, error) {
	panic(fmt.Errorf("not implemented: SubscribeToConversation - subscribeToConversation"))
}

// UnsubscribeFromConversation is the resolver for the unsubscribeFromConversation field.
func (r *mutationResolver) UnsubscribeFromConversation(ctx context.Context, input model.UnsubscribeFromConversationInput) (*model.ConversationSubscription, error) {
	panic(fmt.Errorf("not implemented: UnsubscribeFromConversation - unsubscribeFromConversation"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Conversation is the resolver for the conversation field.
func (r *queryResolver) Conversation(ctx context.Context, id string) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: Conversation - conversation"))
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, id string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: Message - message"))
}

// NewMessage is the resolver for the newMessage field.
func (r *subscriptionResolver) NewMessage(ctx context.Context, conversationID string) (<-chan *model.Message, error) {
	panic(fmt.Errorf("not implemented: NewMessage - newMessage"))
}

// Conversation returns graph.ConversationResolver implementation.
func (r *Resolver) Conversation() graph.ConversationResolver { return &conversationResolver{r} }

// ConversationSubscription returns graph.ConversationSubscriptionResolver implementation.
func (r *Resolver) ConversationSubscription() graph.ConversationSubscriptionResolver {
	return &conversationSubscriptionResolver{r}
}

// Message returns graph.MessageResolver implementation.
func (r *Resolver) Message() graph.MessageResolver { return &messageResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type conversationResolver struct{ *Resolver }
type conversationSubscriptionResolver struct{ *Resolver }
type messageResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
